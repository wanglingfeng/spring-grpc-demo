apply plugin: 'idea'

buildscript {
    ext {
        springBootVersion = '1.4.0.RELEASE'
        grpcVersion = '1.0.0'
    }
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release'}
        maven { url 'https://plugins.gradle.org/m2/'}

    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath('com.jfrog.bintray.gradle:gradle-bintray-plugin:1.5')
        classpath('com.google.protobuf:protobuf-gradle-plugin:0.8.0')
        classpath('com.netflix.nebula:nebula-project-plugin:2.2.1')
        classpath('com.netflix.nebula:nebula-interactive:2.0.+')
        classpath('org.jfrog.buildinfo:build-info-extractor-gradle:4.0.0')
    }
}

subprojects {
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'nebula-interactive'

    apply plugin: 'com.google.protobuf'
    apply plugin: 'spring-boot'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    repositories {
        mavenCentral()
        jcenter()
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies{
        compileOnly('org.projectlombok:lombok:1.16.6')

        compile("io.grpc:grpc-stub:${grpcVersion}")
        compile("io.grpc:grpc-protobuf:${grpcVersion}")
        compile("io.grpc:grpc-netty:${grpcVersion}")
        compile('org.springframework.boot:spring-boot-starter-actuator')
        compile('org.springframework.boot:spring-boot-starter-web')
        compile('org.springframework.boot:spring-boot-starter-aop')
        compile('org.lognet:grpc-spring-boot-starter:0.0.7')
        testCompile('org.springframework.boot:spring-boot-starter-test')
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
        }
    }

    sourceSets {
        main {
            java {
                srcDir 'src/main/protoGen'
            }
        }
    }

    protobuf {
        protoc {
            artifact = 'com.google.protobuf:protoc:3.0.0'
        }
        plugins {
            grpc {
                artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
            }
        }

        generateProtoTasks {
            ofSourceSet('main').each { task ->
                task.builtins {
                    java{
                        outputSubDir = 'protoGen'
                    }
                }
                task.plugins {
                    grpc {
                        outputSubDir = 'protoGen'
                    }
                }
            }
        }
        generatedFilesBaseDir = "$projectDir/src/"
    }

    task cleanProtoGen{
        doFirst{
            delete("$projectDir/src/main/protoGen")
        }
    }
    clean.dependsOn cleanProtoGen
}